// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: relationships.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const checkFollowing = `-- name: CheckFollowing :one
SELECT followed_id, follower_id FROM relationships
WHERE follower_id=$1 AND followed_id=$2
`

type CheckFollowingParams struct {
	FollowerID uuid.UUID `json:"follower_id"`
	FollowedID uuid.UUID `json:"followed_id"`
}

func (q *Queries) CheckFollowing(ctx context.Context, arg CheckFollowingParams) (Relationship, error) {
	row := q.db.QueryRowContext(ctx, checkFollowing, arg.FollowerID, arg.FollowedID)
	var i Relationship
	err := row.Scan(&i.FollowedID, &i.FollowerID)
	return i, err
}

const follow = `-- name: Follow :one
INSERT INTO relationships (followed_id, follower_id)
VALUES ($1, $2)
RETURNING followed_id, follower_id
`

type FollowParams struct {
	FollowedID uuid.UUID `json:"followed_id"`
	FollowerID uuid.UUID `json:"follower_id"`
}

func (q *Queries) Follow(ctx context.Context, arg FollowParams) (Relationship, error) {
	row := q.db.QueryRowContext(ctx, follow, arg.FollowedID, arg.FollowerID)
	var i Relationship
	err := row.Scan(&i.FollowedID, &i.FollowerID)
	return i, err
}

const getAllFollowers = `-- name: GetAllFollowers :many
SELECT users.id, username, display_name, avatar_url
FROM users JOIN relationships
ON users.id=relationships.follower_id
WHERE relationships.followed_id =$1
`

func (q *Queries) GetAllFollowers(ctx context.Context, followedID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllFollowers, followedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFollowing = `-- name: GetAllFollowing :many
SELECT users.id, username, display_name, avatar_url
FROM users JOIN relationships
ON users.id=relationships.followed_id
WHERE relationships.follower_id= $1
`

func (q *Queries) GetAllFollowing(ctx context.Context, followerID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllFollowing, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollow = `-- name: Unfollow :one
DELETE FROM relationships
WHERE followed_id=$1 AND follower_id=$2
RETURNING followed_id, follower_id
`

type UnfollowParams struct {
	FollowedID uuid.UUID `json:"followed_id"`
	FollowerID uuid.UUID `json:"follower_id"`
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) (Relationship, error) {
	row := q.db.QueryRowContext(ctx, unfollow, arg.FollowedID, arg.FollowerID)
	var i Relationship
	err := row.Scan(&i.FollowedID, &i.FollowerID)
	return i, err
}
