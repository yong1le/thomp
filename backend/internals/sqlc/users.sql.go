// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, display_name, avatar_url)
VALUES ($1, $2, $3)
RETURNING id, display_name, avatar_url
`

type CreateUserParams struct {
	ID          string
	DisplayName string
	AvatarUrl   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.DisplayName, arg.AvatarUrl)
	var i User
	err := row.Scan(&i.ID, &i.DisplayName, &i.AvatarUrl)
	return i, err
}

const updateAvatar = `-- name: UpdateAvatar :one
UPDATE users
SET avatar_url = $2
WHERE id = $1
RETURNING id, display_name, avatar_url
`

type UpdateAvatarParams struct {
	ID        string
	AvatarUrl string
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg UpdateAvatarParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateAvatar, arg.ID, arg.AvatarUrl)
	var i User
	err := row.Scan(&i.ID, &i.DisplayName, &i.AvatarUrl)
	return i, err
}

const updateDisplayName = `-- name: UpdateDisplayName :one
UPDATE users
SET display_name=$2
WHERE id=$1
RETURNING id, display_name, avatar_url
`

type UpdateDisplayNameParams struct {
	ID          string
	DisplayName string
}

func (q *Queries) UpdateDisplayName(ctx context.Context, arg UpdateDisplayNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateDisplayName, arg.ID, arg.DisplayName)
	var i User
	err := row.Scan(&i.ID, &i.DisplayName, &i.AvatarUrl)
	return i, err
}
